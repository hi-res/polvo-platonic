// Generated by CoffeeScript 1.6.3
var Index, clone, nib, path, platonic, stylus;

(require('source-map-support')).install({
  handleUncaughtExceptions: false
});

path = require('path');

stylus = require('stylus');

nib = require('nib');

platonic = require('stylus-platonic');

clone = require('regexp-clone');

module.exports = new (Index = (function() {
  var has_import, match_all;

  function Index() {}

  Index.prototype.type = 'style';

  Index.prototype.name = 'stylus';

  Index.prototype.output = 'css';

  Index.prototype.ext = /\.styl$/m;

  Index.prototype.exts = ['.styl'];

  Index.prototype.partials = true;

  has_import = /^\s*(?!\/\/)@import\s/m;

  match_all = /^\s*(?:(?!\/\/).?)@import\s+(?:"|')(\S+)(?:"|')/mg;

  Index.prototype.is_partial = function(filepath) {
    return /^_/m.test(path.basename(filepath));
  };

  Index.prototype.compile = function(filepath, source, debug, error, done) {
    return stylus(source).set('filename', filepath).use(nib()).use(platonic())["import"]('nib').set('linenos', debug === true).render(function(err, css) {
      if (err != null) {
        error(err);
        return done('');
      } else {
        return done(css);
      }
    });
  };

  Index.prototype.resolve_dependents = function(filepath, files) {
    var all, dependents, dirpath, each, has, impor7, match, name, sub, _i, _len, _ref;
    dependents = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      each = files[_i];
      _ref = [clone(has_import), clone(match_all)], has = _ref[0], all = _ref[1];
      if (!has.test(each.raw)) {
        continue;
      }
      dirpath = path.dirname(each.filepath);
      name = path.basename(each.filepath);
      while ((match = all.exec(each.raw)) != null) {
        impor7 = match[1];
        impor7 = impor7.replace(this.ext, '') + '.styl';
        impor7 = path.join(dirpath, impor7);
        if (impor7 === filepath) {
          if (!this.is_partial(name)) {
            dependents.push(each);
          } else {
            sub = this.resolve_dependents(each.filepath, files);
            dependents = dependents.concat(sub);
          }
        }
      }
    }
    return dependents;
  };

  return Index;

})());

/*
//@ sourceMappingURL=index.map
*/
